name: Deploy Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
      image_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        default: 'latest'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: 'Terraform ${{ github.event.inputs.action }}'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ./terraform-strapi
      run: |
        terraform init

    - name: Terraform Workspace
      working-directory: ./terraform-strapi
      run: |
        # Use -or-create flag to avoid error when workspace doesn't exist
        terraform workspace select -or-create ${{ github.event.inputs.environment }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      working-directory: ./terraform-strapi
      run: |
        terraform plan \
          -var="docker_image=${{ secrets.DOCKER_USERNAME }}/strapi-app:${{ github.event.inputs.image_tag }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="key_name=${{ secrets.AWS_KEY_NAME || 'strapi-key' }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      working-directory: ./terraform-strapi
      run: |
        terraform plan \
          -var="docker_image=${{ secrets.DOCKER_USERNAME }}/strapi-app:${{ github.event.inputs.image_tag }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="key_name=${{ secrets.AWS_KEY_NAME || 'strapi-key' }}" \
          -out=tfplan
        
        terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      working-directory: ./terraform-strapi
      run: |
        terraform destroy -auto-approve \
          -var="docker_image=${{ secrets.DOCKER_USERNAME }}/strapi-app:${{ github.event.inputs.image_tag }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="key_name=${{ secrets.AWS_KEY_NAME || 'strapi-key' }}"

    - name: Get Outputs
      if: github.event.inputs.action == 'apply'
      working-directory: ./terraform-strapi
      id: outputs
      run: |
        echo "ec2_public_ip=$(terraform output -raw ec2_public_ip 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        echo "ec2_instance_id=$(terraform output -raw ec2_instance_id 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT

    - name: Deployment Summary
      if: github.event.inputs.action == 'apply'
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image:** \`${{ secrets.DOCKER_USERNAME }}/strapi-app:${{ github.event.inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**EC2 Public IP:** http://${{ steps.outputs.outputs.ec2_public_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "**EC2 Instance ID:** ${{ steps.outputs.outputs.ec2_instance_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Access your application:" >> $GITHUB_STEP_SUMMARY
        echo "- **Strapi Admin:** http://${{ steps.outputs.outputs.ec2_public_ip }}:1337/admin" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint:** http://${{ steps.outputs.outputs.ec2_public_ip }}:1337/api" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 SSH Access:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "ssh -i your-key.pem ec2-user@${{ steps.outputs.outputs.ec2_public_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY